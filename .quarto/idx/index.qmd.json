{"title":"dallas_co <- sf::read_sf(\"data/dallas_co.geojson\")","markdown":{"yaml":{"pagetitle":"Street Maintenance Map","format":"html"},"headingText":"dallas_co <- sf::read_sf(\"data/dallas_co.geojson\")","containsRefs":false,"markdown":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\nlibrary(traveltimeR)\nlibrary(crosstalk)\n\n\n# dallas_co <- tigris::counties(state = \"TX\") %>%\n#   filter(NAME == \"Dallas\")\n# sf::write_sf(dallas_co, \"data/dallas_co.geojson\")\n\ncouncils <- sf::read_sf(\"data/councils_colors.geojson\") %>%\n  st_transform(4269)\n\ncouncil_centers <- councils %>%\n  st_difference(\n    sf::st_sfc(sf::st_polygon(list(matrix(c(\n      -96.6, 32.75,\n      -96.6, 33.1,\n      -96.3, 33.1,\n      -96.3, 32.75,\n      -96.6, 32.75\n    ), ncol = 2, byrow = TRUE))), crs = sf::st_crs(councils))\n  ) %>%\n  sf::st_point_on_surface() \n\nbounds <- sf::st_bbox(councils)\n\nsweeping <- read_csv(\"data/street-sweeping.csv\") %>%\n  janitor::clean_names() %>%\n  mutate(startD = as.Date(actual_start_date, format = \"%m/%d/%Y\"),\n         endD = as.Date(construct_complete, format = \"%m/%d/%Y\"),\n         estimated_cost_0 = ifelse(\n            is.na(estimated_cost),\n            0,\n            estimated_cost),\n         day_len = endD - startD\n         ) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4269)\n# sweeping <- read_csv(\"data/street-sweeping.csv\") %>%\n#   mutate(address = paste(street_name_alt, \"Dallas, TX\", sep = \", \")) %>%\n#   tidygeocoder::geocode(address = address, method = \"arcgis\")\n# write_csv(sweeping, \"data/street-sweeping.csv\")\n\n\n# spending <- read_csv(\"data/Infrastructure Spending.csv\") %>%\n#   janitor::clean_names() %>%\n#   filter(!grepl(\",\", district)) %>%\n#   filter(!grepl(\"Citywide\", district)) %>%\n#   mutate(\n#     district = as.factor(as.numeric(district)),\n#     program_name = as.factor(program_name),\n#     amount_left = current_commit - amount_paid\n#   )\n# \n# spending_paid <- spending %>%\n#   group_by(district, program_name) %>%\n#   summarize(\n#     amount_paid = sum(amount_paid)\n#   ) %>%\n#   bind_rows(\n#     spending %>%\n#       group_by(district) %>%\n#       summarize(\n#         amount_paid = sum(amount_paid)\n#       ) %>%\n#       mutate(\n#         program_name = \"Total\"\n#       )\n#   )\n# \n# spending_left <- spending %>%\n#   group_by(district, program_name) %>%\n#   summarize(\n#     amount_left = sum(amount_left)\n#   ) %>%\n#   bind_rows(\n#     spending %>%\n#       group_by(district) %>%\n#       summarize(\n#         amount_left = sum(amount_left)\n#       ) %>%\n#       mutate(\n#         program_name = \"Total\"\n#       )\n#   )\n# \n# spending_all0 <- full_join(spending_paid, spending_left) %>%\n#   mutate(program_name = abbreviate(program_name)) %>%\n#   pivot_wider(\n#     names_from = program_name,\n#     values_from = c(amount_paid, amount_left)\n#   ) %>%\n#   mutate_all(~replace(., is.na(.), 0)) %>%\n#   rename(DISTRICT = district)\n# \n# spending_all <- spending_all0 %>%\n#   mutate(\n#     pct_spent = amount_paid_Totl / (amount_left_Totl + amount_paid_Totl),\n#     pct_paid_dal = amount_paid_Totl / sum(spending_all0$amount_paid_Totl),\n#     pct_left_dal = amount_left_Totl / sum(spending_all0$amount_left_Totl)\n#          ) %>%\n#   left_join(councils, by = \"DISTRICT\") %>% \n#   st_as_sf() %>% \n#   st_set_crs(4269)\n# \n# write_csv(spending_all, \"data/spending_wide.csv\")\n# st_write(spending_all, \"data/spending.geojson\")\n\nspending <- st_read(\"data/spending.geojson\")\n\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25, \n  ymin = bounds[\"ymin\"] - 0.25, \n  xmax = bounds[\"xmax\"] + 0.25, \n  ymax = bounds[\"ymax\"] + 0.25\n))\n\n\nshared_data <- SharedData$new(sweeping)\n\nmin_date <- min(sweeping$startD) %>%\n  format(\"%m/%d/%y\")\nmax_date <- max(sweeping$endD) %>%\n  format(\"%m/%d/%y\")\n\ncost_med <- scales::dollar(median(sweeping$estimated_cost, na.rm = TRUE), accuracy = 1)\ncost_mn <- scales::dollar(mean(sweeping$estimated_cost, na.rm = TRUE), accuracy = 1)\nlen_proj <- round(mean(sweeping$day_len))\n\n\nmap_palette <- c(\"#008097\", \"#ED683F\", \"#EACA2D\", \"#5C2B1C\", \"#ED018C\", \"#185411\")\n\n```\n\n\n```{=html}\n<div class=\"column-screen-inset\">\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n\n<div class=\"card\">\n\n<div class=\"cardbox\">\n\n<div class=\"left-card-col\">\n\n  <div class=\"card-side\" style=\"width: 94%;\">\n  \n    <div class=\"card-text\">\n  \n      <h4 style=\"font-size: 18px!important;\">There were <b>`r nrow(sweeping)`</b> street maintenance projects in the city of Dallas between `r min_date` and `r max_date`.</h4>\n      \n      <hr/>\n      \n      <div class=\"tp\">\n          <i class=\"bi bi-piggy-bank-fill tp-icon\"></i>\n          <div class=\"tp-text\">\n            Median cost of `r cost_med`<br>\n            Mean cost of `r cost_mn`\n          </div>\n      </div>\n  \n      <div class=\"tp\">\n          <i class=\"bi bi-calendar-range tp-icon\"></i>\n          <div class=\"tp-text\">\n            Average project length of `r len_proj` days\n          </div>\n      </div>\n  \n      <div class=\"tp\">\n          <i class=\"tp-icon\"></i>\n          <div class=\"tp-text\">Your third talking point here...</div>\n      </div>\n      \n    </div>\n    \n    <div class=\"slider-box\">\n\n```\n\n\n```{r slider}\n\nfilter_slider(\"Estimated Cost\", \"Filter map by estimated cost:\", shared_data, ~estimated_cost_0, width = \"95%\", pre = \"$\", min = 0, max = 1000000, ticks = FALSE, step = 500)\n\n```\n\n\n```{=html}\n    </div>\n  </div>\n</div>\n\n<div class=\"right-card-col\">\n```\n\n\n```{r map}\n\nleaflet(data = df, \n             # height = \"90vh\", \n             # width = \"100%\",\n             elementId = \"treatment_map\",\n             options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )\n             ) %>%\n  addProviderTiles(provider = \"CartoDB.Positron\") %>%\n  addPolygons(\n    data = councils,\n    fillColor = ~cpaltemplates::palette_cpal_main[color_id],\n    fillOpacity = 0.15,\n    stroke = FALSE,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = T)\n  ) %>%\n  addLabelOnlyMarkers(\n    data = council_centers,\n    label = ~COUNCIL,\n    labelOptions = labelOptions(\n      noHide = TRUE, \n      textOnly = TRUE,\n      style = list(\n        \"color\" = \"#333333\",\n        \"font-size\" = \"12px\",\n        \"font-family\" = \"arial\"\n        )\n      )) %>%\n  addCircleMarkers(\n    data = shared_data,\n    radius = 4,\n    stroke = FALSE,\n    color = ~ifelse(treatment_category == \"Maintenance\", \"#ed683f\", \"#379145\"),\n    fillOpacity = 0.7,\n    popup = ~paste0(\n        \"<b>\", action_name, \"</b> finished on \", construct_complete, \"<br/>\",\n        \"<i>\", description, \"</i><br/>\",\n        \"&nbsp;&nbsp;&nbsp;&nbsp;Manager: \", manager_name, \"<br/>\",\n        \"&nbsp;&nbsp;&nbsp;&nbsp;Estimated cost: \", scales::dollar(estimated_cost), \"<br/>\",        \n        \"&nbsp;&nbsp;&nbsp;&nbsp;Project date: \", actual_start_date, \"&#8211;\", construct_complete\n      )\n  ) %>%\n  addLegend(\n    data = shared_data,\n    \"topright\",\n    pal = colorFactor(palette = c(\"Maintenance\" = \"#ed683f\", \"OtherCategory\" = \"#379145\"), domain = shared_data$treatment_category),\n    values = ~treatment_category,\n    title = \"Treatment\",\n    opacity = 0.7\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])\n\n```\n\n\n```{=html}\n</div>\n\n</div>\n\n</div>\n\n\n</div>\n</div>\n</div>\n```","srcMarkdownNoYaml":"\n\n```{r setup, output = F, echo = F}\n\nlibrary(tidycensus)\nlibrary(sf)\nrequire(tidyverse)\nlibrary(leaflet)\nlibrary(traveltimeR)\nlibrary(crosstalk)\n\n\n# dallas_co <- sf::read_sf(\"data/dallas_co.geojson\")\n# dallas_co <- tigris::counties(state = \"TX\") %>%\n#   filter(NAME == \"Dallas\")\n# sf::write_sf(dallas_co, \"data/dallas_co.geojson\")\n\ncouncils <- sf::read_sf(\"data/councils_colors.geojson\") %>%\n  st_transform(4269)\n\ncouncil_centers <- councils %>%\n  st_difference(\n    sf::st_sfc(sf::st_polygon(list(matrix(c(\n      -96.6, 32.75,\n      -96.6, 33.1,\n      -96.3, 33.1,\n      -96.3, 32.75,\n      -96.6, 32.75\n    ), ncol = 2, byrow = TRUE))), crs = sf::st_crs(councils))\n  ) %>%\n  sf::st_point_on_surface() \n\nbounds <- sf::st_bbox(councils)\n\nsweeping <- read_csv(\"data/street-sweeping.csv\") %>%\n  janitor::clean_names() %>%\n  mutate(startD = as.Date(actual_start_date, format = \"%m/%d/%Y\"),\n         endD = as.Date(construct_complete, format = \"%m/%d/%Y\"),\n         estimated_cost_0 = ifelse(\n            is.na(estimated_cost),\n            0,\n            estimated_cost),\n         day_len = endD - startD\n         ) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4269)\n# sweeping <- read_csv(\"data/street-sweeping.csv\") %>%\n#   mutate(address = paste(street_name_alt, \"Dallas, TX\", sep = \", \")) %>%\n#   tidygeocoder::geocode(address = address, method = \"arcgis\")\n# write_csv(sweeping, \"data/street-sweeping.csv\")\n\n\n# spending <- read_csv(\"data/Infrastructure Spending.csv\") %>%\n#   janitor::clean_names() %>%\n#   filter(!grepl(\",\", district)) %>%\n#   filter(!grepl(\"Citywide\", district)) %>%\n#   mutate(\n#     district = as.factor(as.numeric(district)),\n#     program_name = as.factor(program_name),\n#     amount_left = current_commit - amount_paid\n#   )\n# \n# spending_paid <- spending %>%\n#   group_by(district, program_name) %>%\n#   summarize(\n#     amount_paid = sum(amount_paid)\n#   ) %>%\n#   bind_rows(\n#     spending %>%\n#       group_by(district) %>%\n#       summarize(\n#         amount_paid = sum(amount_paid)\n#       ) %>%\n#       mutate(\n#         program_name = \"Total\"\n#       )\n#   )\n# \n# spending_left <- spending %>%\n#   group_by(district, program_name) %>%\n#   summarize(\n#     amount_left = sum(amount_left)\n#   ) %>%\n#   bind_rows(\n#     spending %>%\n#       group_by(district) %>%\n#       summarize(\n#         amount_left = sum(amount_left)\n#       ) %>%\n#       mutate(\n#         program_name = \"Total\"\n#       )\n#   )\n# \n# spending_all0 <- full_join(spending_paid, spending_left) %>%\n#   mutate(program_name = abbreviate(program_name)) %>%\n#   pivot_wider(\n#     names_from = program_name,\n#     values_from = c(amount_paid, amount_left)\n#   ) %>%\n#   mutate_all(~replace(., is.na(.), 0)) %>%\n#   rename(DISTRICT = district)\n# \n# spending_all <- spending_all0 %>%\n#   mutate(\n#     pct_spent = amount_paid_Totl / (amount_left_Totl + amount_paid_Totl),\n#     pct_paid_dal = amount_paid_Totl / sum(spending_all0$amount_paid_Totl),\n#     pct_left_dal = amount_left_Totl / sum(spending_all0$amount_left_Totl)\n#          ) %>%\n#   left_join(councils, by = \"DISTRICT\") %>% \n#   st_as_sf() %>% \n#   st_set_crs(4269)\n# \n# write_csv(spending_all, \"data/spending_wide.csv\")\n# st_write(spending_all, \"data/spending.geojson\")\n\nspending <- st_read(\"data/spending.geojson\")\n\n\nexpanded_bounds <- as.vector(c(\n  xmin = bounds[\"xmin\"] - 0.25, \n  ymin = bounds[\"ymin\"] - 0.25, \n  xmax = bounds[\"xmax\"] + 0.25, \n  ymax = bounds[\"ymax\"] + 0.25\n))\n\n\nshared_data <- SharedData$new(sweeping)\n\nmin_date <- min(sweeping$startD) %>%\n  format(\"%m/%d/%y\")\nmax_date <- max(sweeping$endD) %>%\n  format(\"%m/%d/%y\")\n\ncost_med <- scales::dollar(median(sweeping$estimated_cost, na.rm = TRUE), accuracy = 1)\ncost_mn <- scales::dollar(mean(sweeping$estimated_cost, na.rm = TRUE), accuracy = 1)\nlen_proj <- round(mean(sweeping$day_len))\n\n\nmap_palette <- c(\"#008097\", \"#ED683F\", \"#EACA2D\", \"#5C2B1C\", \"#ED018C\", \"#185411\")\n\n```\n\n\n```{=html}\n<div class=\"column-screen-inset\">\n<div class=\"mainboxbox\">\n<div class=\"mainbox\">\n\n<div class=\"card\">\n\n<div class=\"cardbox\">\n\n<div class=\"left-card-col\">\n\n  <div class=\"card-side\" style=\"width: 94%;\">\n  \n    <div class=\"card-text\">\n  \n      <h4 style=\"font-size: 18px!important;\">There were <b>`r nrow(sweeping)`</b> street maintenance projects in the city of Dallas between `r min_date` and `r max_date`.</h4>\n      \n      <hr/>\n      \n      <div class=\"tp\">\n          <i class=\"bi bi-piggy-bank-fill tp-icon\"></i>\n          <div class=\"tp-text\">\n            Median cost of `r cost_med`<br>\n            Mean cost of `r cost_mn`\n          </div>\n      </div>\n  \n      <div class=\"tp\">\n          <i class=\"bi bi-calendar-range tp-icon\"></i>\n          <div class=\"tp-text\">\n            Average project length of `r len_proj` days\n          </div>\n      </div>\n  \n      <div class=\"tp\">\n          <i class=\"tp-icon\"></i>\n          <div class=\"tp-text\">Your third talking point here...</div>\n      </div>\n      \n    </div>\n    \n    <div class=\"slider-box\">\n\n```\n\n\n```{r slider}\n\nfilter_slider(\"Estimated Cost\", \"Filter map by estimated cost:\", shared_data, ~estimated_cost_0, width = \"95%\", pre = \"$\", min = 0, max = 1000000, ticks = FALSE, step = 500)\n\n```\n\n\n```{=html}\n    </div>\n  </div>\n</div>\n\n<div class=\"right-card-col\">\n```\n\n\n```{r map}\n\nleaflet(data = df, \n             # height = \"90vh\", \n             # width = \"100%\",\n             elementId = \"treatment_map\",\n             options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )\n             ) %>%\n  addProviderTiles(provider = \"CartoDB.Positron\") %>%\n  addPolygons(\n    data = councils,\n    fillColor = ~cpaltemplates::palette_cpal_main[color_id],\n    fillOpacity = 0.15,\n    stroke = FALSE,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = T)\n  ) %>%\n  addLabelOnlyMarkers(\n    data = council_centers,\n    label = ~COUNCIL,\n    labelOptions = labelOptions(\n      noHide = TRUE, \n      textOnly = TRUE,\n      style = list(\n        \"color\" = \"#333333\",\n        \"font-size\" = \"12px\",\n        \"font-family\" = \"arial\"\n        )\n      )) %>%\n  addCircleMarkers(\n    data = shared_data,\n    radius = 4,\n    stroke = FALSE,\n    color = ~ifelse(treatment_category == \"Maintenance\", \"#ed683f\", \"#379145\"),\n    fillOpacity = 0.7,\n    popup = ~paste0(\n        \"<b>\", action_name, \"</b> finished on \", construct_complete, \"<br/>\",\n        \"<i>\", description, \"</i><br/>\",\n        \"&nbsp;&nbsp;&nbsp;&nbsp;Manager: \", manager_name, \"<br/>\",\n        \"&nbsp;&nbsp;&nbsp;&nbsp;Estimated cost: \", scales::dollar(estimated_cost), \"<br/>\",        \n        \"&nbsp;&nbsp;&nbsp;&nbsp;Project date: \", actual_start_date, \"&#8211;\", construct_complete\n      )\n  ) %>%\n  addLegend(\n    data = shared_data,\n    \"topright\",\n    pal = colorFactor(palette = c(\"Maintenance\" = \"#ed683f\", \"OtherCategory\" = \"#379145\"), domain = shared_data$treatment_category),\n    values = ~treatment_category,\n    title = \"Treatment\",\n    opacity = 0.7\n  ) %>%\n  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])\n\n```\n\n\n```{=html}\n</div>\n\n</div>\n\n</div>\n\n\n</div>\n</div>\n</div>\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":9,"fig-height":7,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"www/web_report.scss","toc-title":"Contents","toc-location":"right","anchor-sections":false,"code-summary":"Reveal Code","code-copy":"hover","smooth-scroll":true,"grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"300px"},"code-block-bg":true,"code-block-border-left":"#008097","message":false,"pagetitle":"Street Maintenance Map"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}